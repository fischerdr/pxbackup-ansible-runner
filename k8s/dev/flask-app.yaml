apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-config
data:
  FLASK_APP: app
  FLASK_ENV: development
  FLASK_DEBUG: "1"
  SQLALCHEMY_DATABASE_URI: sqlite:///app.db
  REDIS_URL: redis://redis:6379/0
  VAULT_ADDR: http://vault:8200
  VAULT_TOKEN: root
  VAULT_NAMESPACE: default
  INVENTORY_API_URL: http://mock-inventory:8080
  AUTH_PROVIDER: keycloak
  KEYCLOAK_URL: http://keycloak:8080
  KEYCLOAK_REALM: pxbackup
  KEYCLOAK_CLIENT_ID: pxbackup-client
  KEYCLOAK_CLIENT_SECRET: pxbackup-secret
  OKTA_ISSUER: https://your-okta-domain/oauth2/default
  OKTA_CLIENT_ID: your-okta-client-id
  GITEA_URL: http://gitea:3000
  GITEA_PLAYBOOKS_REPO: user/pxbackup-playbooks
  PLAYBOOKS_DIR: /app/playbooks
  RUNNER_PATH: /runner
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app
spec:
  type: NodePort
  ports:
  - port: 5000
    targetPort: 5000
    nodePort: 30500
  selector:
    app: flask-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      initContainers:
      - name: init-playbooks
        image: python:3.11-slim
        command: ['python']
        args: ['/app/init_playbooks.py']
        env:
        - name: GITEA_URL
          valueFrom:
            configMapKeyRef:
              name: flask-config
              key: GITEA_URL
        - name: GITEA_PLAYBOOKS_REPO
          valueFrom:
            configMapKeyRef:
              name: flask-config
              key: GITEA_PLAYBOOKS_REPO
        - name: PLAYBOOKS_DIR
          valueFrom:
            configMapKeyRef:
              name: flask-config
              key: PLAYBOOKS_DIR
        - name: RUNNER_PATH
          valueFrom:
            configMapKeyRef:
              name: flask-config
              key: RUNNER_PATH
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: playbooks
          mountPath: /app/playbooks
        - name: runner
          mountPath: /runner
        - name: sqlite-data
          mountPath: /app/instance
      containers:
      - name: flask-app
        image: python:3.11-slim
        command: ['/bin/sh', '-c']
        args:
        - |
          pip install -r requirements.txt && \
          mkdir -p /app/instance && \
          flask db upgrade && \
          gunicorn --bind 0.0.0.0:5000 --workers 4 --threads 2 'app:create_app()'
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: flask-config
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: playbooks
          mountPath: /app/playbooks
        - name: runner
          mountPath: /runner
        - name: sqlite-data
          mountPath: /app/instance
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: app-code
        emptyDir: {}
      - name: playbooks
        emptyDir: {}
      - name: runner
        emptyDir: {}
      - name: sqlite-data
        persistentVolumeClaim:
          claimName: sqlite-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sqlite-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
